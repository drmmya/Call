#!/usr/bin/env bash
set -euo pipefail

# One-click TURN (coturn) installer â€“ Ubuntu 20.04/22.04/24.04
# Zero-arg mode works: auto-detects IP, generates random user/pass, writes minimal config,
# enables service, opens UFW ports if UFW is active, prints creds + ICE hints.

IP=""            # --ip 1.2.3.4
USER_NAME=""     # --user myuser
USER_PASS=""     # --pass 'myp@ss'
REALM="mediaaccess.local"   # --realm turn.example.com
MIN_PORT="49160" # --min-port 49160
MAX_PORT="49200" # --max-port 49200

while [[ $# -gt 0 ]]; do
  case "$1" in
    --ip) IP="$2"; shift 2;;
    --user) USER_NAME="$2"; shift 2;;
    --pass) USER_PASS="$2"; shift 2;;
    --realm) REALM="$2"; shift 2;;
    --min-port) MIN_PORT="$2"; shift 2;;
    --max-port) MAX_PORT="$2"; shift 2;;
    -h|--help)
      cat <<EOF
Usage:
  sudo bash $0 [--ip <PUBLIC_IP>] [--user <USER>] [--pass <PASS>] [--realm <realm>] [--min-port N] [--max-port N]
If not provided, IP is auto-detected and user/pass auto-generated.
EOF
      exit 0;;
    *) echo "[!] Unknown arg: $1"; exit 1;;
  case
done

if [[ $EUID -ne 0 ]]; then
  echo "[!] Run as root: sudo bash $0 ..."
  exit 1
fi

# ---- helpers ----
detect_public_ip() {
  local ip
  for svc in "https://ifconfig.me" "https://icanhazip.com" "https://api.ipify.org"; do
    ip="$(curl -fsS "$svc" || true)"
    [[ -n "$ip" ]] && echo "$ip" && return 0
  done
  return 1
}

have_addr_locally() {
  local addr="$1"
  ip -4 -o addr show | awk '{print $4}' | cut -d/ -f1 | grep -Fxq "$addr"
}

rand_pw() { tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20; }

# ---- auto values ----
[[ -z "$IP" ]] && IP="$(detect_public_ip || true)"
if [[ -z "$IP" ]]; then
  echo "[!] Could not auto-detect public IP. Pass --ip <PUBLIC_IP>"; exit 1
fi

[[ -z "$USER_NAME" ]] && USER_NAME="turn$(date +%s)"
[[ -z "$USER_PASS" ]] && USER_PASS="$(rand_pw)"

echo "[*] Using:"
echo "    IP=${IP}"
echo "    USER=${USER_NAME}"
echo "    PASS=${USER_PASS}"
echo "    REALM=${REALM}"
echo "    PORTS: 3478/udp, relay UDP ${MIN_PORT}-${MAX_PORT}"

export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get install -y coturn

# Enable coturn service at boot
if [[ -f /etc/default/coturn ]]; then
  sed -i 's/^#\?TURNSERVER_ENABLED=.*/TURNSERVER_ENABLED=1/' /etc/default/coturn || true
else
  echo 'TURNSERVER_ENABLED=1' > /etc/default/coturn
fi

# Build minimal config (no TLS to avoid cert issues; add later if needed)
CONF=/etc/turnserver.conf
TMP=$(mktemp)
{
  echo "# --- Auto-generated by tun.sh ---"
  echo "listening-port=3478"
  # Bind only if this IP exists locally; otherwise bind all (omit line)
  if have_addr_locally "$IP"; then
    echo "listening-ip=${IP}"
  fi
  echo
  echo "fingerprint"
  echo "lt-cred-mech"
  echo "realm=${REALM}"
  echo "user=${USER_NAME}:${USER_PASS}"
  echo
  echo "no-cli"
  echo "no-ipv6"
  echo "stale-nonce"
  echo
  echo "total-quota=0"
  echo "bps-capacity=0"
  echo "min-port=${MIN_PORT}"
  echo "max-port=${MAX_PORT}"
  echo
  echo "log-file=/var/log/turnserver.log"
  echo "simple-log"
} > "$TMP"
mv "$TMP" "$CONF"

# Save creds for the user
CREDS=/root/turn-ice.txt
cat >"$CREDS" <<EOT
TURN IP: ${IP}
USERNAME: ${USER_NAME}
PASSWORD: ${USER_PASS}
REALM: ${REALM}
Ports: 3478/udp, relay UDP ${MIN_PORT}-${MAX_PORT}

Android/WebRTC ICE:
  stun:stun.l.google.com:19302
  turn:${IP}:3478?transport=udp  (user=${USER_NAME}, pass=${USER_PASS})
EOT
chmod 600 "$CREDS"

# UFW rules if active (won't enable UFW automatically)
if command -v ufw >/dev/null 2>&1; then
  STATUS=$(ufw status | head -n1 || true)
  echo "[i] UFW: $STATUS"
  if echo "$STATUS" | grep -qi active; then
    ufw allow 3478/udp || true
    ufw allow ${MIN_PORT}:${MAX_PORT}/udp || true
    ufw reload || true
  fi
fi

# Start service
systemctl daemon-reload
systemctl enable coturn || true
if ! systemctl restart coturn; then
  echo "[!] coturn failed to start. Last logs:"
  journalctl -xeu coturn.service --no-pager | tail -n 60 || true
  exit 1
fi

sleep 1
systemctl --no-pager --full status coturn | sed -n '1,25p' || true

# Quick bind check
if ss -lun | grep -q ':3478'; then
  ok="yes"
else
  ok="no"
fi

echo
echo "============================================================"
echo "TURN ready: ${ok}"
echo "Config : ${CONF}"
echo "Creds  : ${CREDS}"
echo "Logs   : /var/log/turnserver.log"
echo "Service: systemctl status coturn"
echo
echo "Use in your app:"
echo "  stun:stun.l.google.com:19302"
echo "  turn:${IP}:3478?transport=udp  (user=${USER_NAME}, pass=${USER_PASS})"
echo "============================================================"
