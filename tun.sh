#!/usr/bin/env bash
set -euo pipefail

# One-click coturn (TURN) installer for Ubuntu 20.04/22.04/24.04
# Example:
#   sudo bash install_turn.sh --ip 203.0.113.10 --user turnuser --pass turnpass
#   sudo bash install_turn.sh --ip $(curl -s https://ifconfig.me) --user turnuser --pass turnpass \
#        --min-port 49160 --max-port 49200

IP=""
USER_NAME=""
USER_PASS=""
REALM="mediaaccess.local"
MIN_PORT="49160"
MAX_PORT="49200"

usage() {
  cat <<EOF
Usage:
  sudo bash $0 --ip <PUBLIC_IP> --user <TURN_USER> --pass <TURN_PASS> [--realm <realm>] [--min-port 49160] [--max-port 49200]

After install, use this ICE in your app:
  turn:<PUBLIC_IP>:3478?transport=udp  (username/password = your input)
EOF
}

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --ip) IP="$2"; shift 2;;
    --user) USER_NAME="$2"; shift 2;;
    --pass) USER_PASS="$2"; shift 2;;
    --realm) REALM="$2"; shift 2;;
    --min-port) MIN_PORT="$2"; shift 2;;
    --max-port) MAX_PORT="$2"; shift 2;;
    -h|--help) usage; exit 0;;
    *) echo "[!] Unknown arg: $1"; usage; exit 1;;
  esac
done

if [[ $EUID -ne 0 ]]; then
  echo "[!] Please run as root. Example:"
  echo "    sudo bash $0 --ip 203.0.113.10 --user turnuser --pass turnpass"
  exit 1
fi

if [[ -z "${IP}" || -z "${USER_NAME}" || -z "${USER_PASS}" ]]; then
  echo "[!] Missing required args."
  usage
  exit 1
fi

echo "[*] Installing coturn..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get install -y coturn

echo "[*] Enabling coturn service..."
if [[ -f /etc/default/coturn ]]; then
  sed -i 's/^#\?TURNSERVER_ENABLED=.*/TURNSERVER_ENABLED=1/' /etc/default/coturn || true
else
  echo 'TURNSERVER_ENABLED=1' > /etc/default/coturn
fi

CONF=/etc/turnserver.conf
echo "[*] Writing $CONF ..."
cat >"$CONF" <<EOF
# --- Auto-generated by install_turn.sh ---
# Ports
listening-port=3478
tls-listening-port=5349

# Bind to public IPv4
listening-ip=${IP}
# relay-ip=${IP}   # Usually not needed on DigitalOcean (no NAT)

# Auth (long-term credentials)
fingerprint
lt-cred-mech
realm=${REALM}
user=${USER_NAME}:${USER_PASS}

# Security / stability
no-multicast-peers
no-cli
stale-nonce
no-ipv6

# Quotas (leave 0 = defaults)
total-quota=0
bps-capacity=0

# Restrict relay UDP range (open on firewall)
min-port=${MIN_PORT}
max-port=${MAX_PORT}

# Logging
log-file=/var/log/turnserver.log
simple-log
EOF

echo "[*] Firewall rules..."
if command -v ufw >/dev/null 2>&1; then
  STATUS=$(ufw status | head -n1 || true)
  echo "    UFW: $STATUS"
  if echo "$STATUS" | grep -qi active; then
    ufw allow 3478/udp || true
    ufw allow 5349/tcp || true
    ufw allow ${MIN_PORT}:${MAX_PORT}/udp || true
    ufw reload || true
  else
    echo "[i] UFW installed but inactive. If you enable later, allow:"
    echo "    ufw allow 22/tcp"
    echo "    ufw allow 3478/udp"
    echo "    ufw allow 5349/tcp"
    echo "    ufw allow ${MIN_PORT}:${MAX_PORT}/udp"
    echo "    ufw reload"
  fi
else
  echo "[i] UFW not installed. If using DigitalOcean Cloud Firewall, add inbound:"
  echo "    UDP 3478, TCP 5349, UDP ${MIN_PORT}-${MAX_PORT}"
fi

echo "[*] Restarting coturn..."
systemctl enable coturn
systemctl restart coturn

sleep 1
systemctl --no-pager --full status coturn | sed -n '1,40p' || true

cat <<EOM

============================================================
TURN server is configured âœ…

Use these ICE servers in your Android/WebRTC app:

  PeerConnection.IceServer.builder("stun:stun.l.google.com:19302").createIceServer(),
  PeerConnection.IceServer.builder("turn:${IP}:3478?transport=udp")
      .setUsername("${USER_NAME}")
      .setPassword("${USER_PASS}")
      .createIceServer()

(Optionally add TLS later with a domain on port 5349.)

Files:
  Config: /etc/turnserver.conf
  Log:    /var/log/turnserver.log
Service:
  systemctl status coturn

Quick test from server:
  turnutils_stunclient -p 3478 ${IP}  (optional)

After adding this TURN in your app, check candidates for 'typ relay'.
============================================================
EOM
